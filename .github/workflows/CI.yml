# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Backend CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**' 
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js with npm cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Create .env file
        run: |
          echo "PORT=8000" > .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "CORS_ORIGIN=\"http://localhost:3000\"" >> .env
          echo "API_KEY=somya" >> .env

      - name: Install dependencies
        run: npm install

      - name: Test backend syntax
        run: node -c src/index.js

      - name: Test MongoDB connection
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          if [ -n "$MONGODB_URI" ]; then
            echo "const mongoose = require('mongoose'); async function testConnection() { try { await mongoose.connect(process.env.MONGODB_URI); console.log('MongoDB connection successful'); process.exit(0); } catch (error) { console.error('MongoDB connection failed:', error); process.exit(1); } } testConnection();" > test-connection.js
            node -r dotenv/config test-connection.js
          else
            echo "Skipping MongoDB connection test - MONGODB_URI not provided"
            exit 0
          fi
